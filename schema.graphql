# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  businesses(where: BusinessWhereInput! = {}, orderBy: [BusinessOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BusinessWhereUniqueInput): [Business!]
  businessesCount(where: BusinessWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  productReviews(where: ProductReviewWhereInput! = {}, orderBy: [ProductReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductReviewWhereUniqueInput): [ProductReview!]
  productReviewsCount(where: ProductReviewWhereInput! = {}): Int
  quotes(where: QuoteWhereInput! = {}, orderBy: [QuoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuoteWhereUniqueInput): [Quote!]
  quotesCount(where: QuoteWhereInput! = {}): Int
  complaints(where: ComplaintWhereInput! = {}, orderBy: [ComplaintOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ComplaintWhereUniqueInput): [Complaint!]
  complaintsCount(where: ComplaintWhereInput! = {}): Int
  productComplaints(where: ProductComplaintWhereInput! = {}, orderBy: [ProductComplaintOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductComplaintWhereUniqueInput): [ProductComplaint!]
  productComplaintsCount(where: ProductComplaintWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringNullableFilter
  businesses: BusinessManyRelationFilter
  reviews: ReviewManyRelationFilter
  productReviews: ProductReviewManyRelationFilter
  quotes: QuoteManyRelationFilter
  complaints: ComplaintManyRelationFilter
  productComplaints: ProductComplaintManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input BusinessManyRelationFilter {
  every: BusinessWhereInput
  some: BusinessWhereInput
  none: BusinessWhereInput
}

input ReviewManyRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input ProductReviewManyRelationFilter {
  every: ProductReviewWhereInput
  some: ProductReviewWhereInput
  none: ProductReviewWhereInput
}

input QuoteManyRelationFilter {
  every: QuoteWhereInput
  some: QuoteWhereInput
  none: QuoteWhereInput
}

input ComplaintManyRelationFilter {
  every: ComplaintWhereInput
  some: ComplaintWhereInput
  none: ComplaintWhereInput
}

input ProductComplaintManyRelationFilter {
  every: ProductComplaintWhereInput
  some: ProductComplaintWhereInput
  none: ProductComplaintWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  businesses: BusinessRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
  productReviews: ProductReviewRelateToManyForUpdateInput
  quotes: QuoteRelateToManyForUpdateInput
  complaints: ComplaintRelateToManyForUpdateInput
  productComplaints: ProductComplaintRelateToManyForUpdateInput
  createdAt: DateTime
}

input BusinessRelateToManyForUpdateInput {
  disconnect: [BusinessWhereUniqueInput!]
  set: [BusinessWhereUniqueInput!]
  create: [BusinessCreateInput!]
  connect: [BusinessWhereUniqueInput!]
}

input ReviewRelateToManyForUpdateInput {
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ProductReviewRelateToManyForUpdateInput {
  disconnect: [ProductReviewWhereUniqueInput!]
  set: [ProductReviewWhereUniqueInput!]
  create: [ProductReviewCreateInput!]
  connect: [ProductReviewWhereUniqueInput!]
}

input QuoteRelateToManyForUpdateInput {
  disconnect: [QuoteWhereUniqueInput!]
  set: [QuoteWhereUniqueInput!]
  create: [QuoteCreateInput!]
  connect: [QuoteWhereUniqueInput!]
}

input ComplaintRelateToManyForUpdateInput {
  disconnect: [ComplaintWhereUniqueInput!]
  set: [ComplaintWhereUniqueInput!]
  create: [ComplaintCreateInput!]
  connect: [ComplaintWhereUniqueInput!]
}

input ProductComplaintRelateToManyForUpdateInput {
  disconnect: [ProductComplaintWhereUniqueInput!]
  set: [ProductComplaintWhereUniqueInput!]
  create: [ProductComplaintCreateInput!]
  connect: [ProductComplaintWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  businesses: BusinessRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
  productReviews: ProductReviewRelateToManyForCreateInput
  quotes: QuoteRelateToManyForCreateInput
  complaints: ComplaintRelateToManyForCreateInput
  productComplaints: ProductComplaintRelateToManyForCreateInput
  createdAt: DateTime
}

input BusinessRelateToManyForCreateInput {
  create: [BusinessCreateInput!]
  connect: [BusinessWhereUniqueInput!]
}

input ReviewRelateToManyForCreateInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ProductReviewRelateToManyForCreateInput {
  create: [ProductReviewCreateInput!]
  connect: [ProductReviewWhereUniqueInput!]
}

input QuoteRelateToManyForCreateInput {
  create: [QuoteCreateInput!]
  connect: [QuoteWhereUniqueInput!]
}

input ComplaintRelateToManyForCreateInput {
  create: [ComplaintCreateInput!]
  connect: [ComplaintWhereUniqueInput!]
}

input ProductComplaintRelateToManyForCreateInput {
  create: [ProductComplaintCreateInput!]
  connect: [ProductComplaintWhereUniqueInput!]
}

type Business {
  id: ID!
  name: String
  description: Business_description_Document
  industry: String
  contactEmail: String
  contactPhone: String
  website: String
  location: String
  address: String
  yearFounded: Int
  typeOfEntity: String
  businessHours: String
  revenue: Int
  employeeCount: Int
  keywords: String
  companyLinkedIn: String
  companyFacebook: String
  companyTwitter: String
  technologiesUsed: String
  sicCodes: String
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  complaints(where: ComplaintWhereInput! = {}, orderBy: [ComplaintOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ComplaintWhereUniqueInput): [Complaint!]
  complaintsCount(where: ComplaintWhereInput! = {}): Int
  quotes(where: QuoteWhereInput! = {}, orderBy: [QuoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuoteWhereUniqueInput): [Quote!]
  quotesCount(where: QuoteWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  jobListings(where: JobListingWhereInput! = {}, orderBy: [JobListingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobListingWhereUniqueInput): [JobListing!]
  jobListingsCount(where: JobListingWhereInput! = {}): Int
  createdAt: DateTime
  manager: User
}

type Business_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BusinessWhereUniqueInput {
  id: ID
}

input BusinessWhereInput {
  AND: [BusinessWhereInput!]
  OR: [BusinessWhereInput!]
  NOT: [BusinessWhereInput!]
  id: IDFilter
  name: StringFilter
  industry: StringFilter
  contactEmail: StringFilter
  contactPhone: StringFilter
  website: StringFilter
  location: StringFilter
  address: StringFilter
  yearFounded: IntNullableFilter
  typeOfEntity: StringNullableFilter
  businessHours: StringFilter
  revenue: IntNullableFilter
  employeeCount: IntNullableFilter
  keywords: StringFilter
  companyLinkedIn: StringFilter
  companyFacebook: StringFilter
  companyTwitter: StringFilter
  technologiesUsed: StringFilter
  sicCodes: StringFilter
  reviews: ReviewManyRelationFilter
  complaints: ComplaintManyRelationFilter
  quotes: QuoteManyRelationFilter
  products: ProductManyRelationFilter
  jobListings: JobListingManyRelationFilter
  createdAt: DateTimeNullableFilter
  manager: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input JobListingManyRelationFilter {
  every: JobListingWhereInput
  some: JobListingWhereInput
  none: JobListingWhereInput
}

input BusinessOrderByInput {
  id: OrderDirection
  name: OrderDirection
  industry: OrderDirection
  contactEmail: OrderDirection
  contactPhone: OrderDirection
  website: OrderDirection
  location: OrderDirection
  address: OrderDirection
  yearFounded: OrderDirection
  typeOfEntity: OrderDirection
  businessHours: OrderDirection
  revenue: OrderDirection
  employeeCount: OrderDirection
  keywords: OrderDirection
  companyLinkedIn: OrderDirection
  companyFacebook: OrderDirection
  companyTwitter: OrderDirection
  technologiesUsed: OrderDirection
  sicCodes: OrderDirection
  createdAt: OrderDirection
}

input BusinessUpdateInput {
  name: String
  description: JSON
  industry: String
  contactEmail: String
  contactPhone: String
  website: String
  location: String
  address: String
  yearFounded: Int
  typeOfEntity: String
  businessHours: String
  revenue: Int
  employeeCount: Int
  keywords: String
  companyLinkedIn: String
  companyFacebook: String
  companyTwitter: String
  technologiesUsed: String
  sicCodes: String
  reviews: ReviewRelateToManyForUpdateInput
  complaints: ComplaintRelateToManyForUpdateInput
  quotes: QuoteRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  jobListings: JobListingRelateToManyForUpdateInput
  createdAt: DateTime
  manager: UserRelateToOneForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input JobListingRelateToManyForUpdateInput {
  disconnect: [JobListingWhereUniqueInput!]
  set: [JobListingWhereUniqueInput!]
  create: [JobListingCreateInput!]
  connect: [JobListingWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input BusinessUpdateArgs {
  where: BusinessWhereUniqueInput!
  data: BusinessUpdateInput!
}

input BusinessCreateInput {
  name: String
  description: JSON
  industry: String
  contactEmail: String
  contactPhone: String
  website: String
  location: String
  address: String
  yearFounded: Int
  typeOfEntity: String
  businessHours: String
  revenue: Int
  employeeCount: Int
  keywords: String
  companyLinkedIn: String
  companyFacebook: String
  companyTwitter: String
  technologiesUsed: String
  sicCodes: String
  reviews: ReviewRelateToManyForCreateInput
  complaints: ComplaintRelateToManyForCreateInput
  quotes: QuoteRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  jobListings: JobListingRelateToManyForCreateInput
  createdAt: DateTime
  manager: UserRelateToOneForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input JobListingRelateToManyForCreateInput {
  create: [JobListingCreateInput!]
  connect: [JobListingWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Product {
  id: ID!
  name: String
  description: Product_description_Document
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  business: Business
  createdAt: DateTime
  reviews(where: ProductReviewWhereInput! = {}, orderBy: [ProductReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductReviewWhereUniqueInput): [ProductReview!]
  reviewsCount(where: ProductReviewWhereInput! = {}): Int
  complaints(where: ProductComplaintWhereInput! = {}, orderBy: [ProductComplaintOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductComplaintWhereUniqueInput): [ProductComplaint!]
  complaintsCount(where: ProductComplaintWhereInput! = {}): Int
}

type Product_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  images: ImageManyRelationFilter
  business: BusinessWhereInput
  createdAt: DateTimeNullableFilter
  reviews: ProductReviewManyRelationFilter
  complaints: ProductComplaintManyRelationFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input ProductUpdateInput {
  name: String
  description: JSON
  images: ImageRelateToManyForUpdateInput
  business: BusinessRelateToOneForUpdateInput
  createdAt: DateTime
  reviews: ProductReviewRelateToManyForUpdateInput
  complaints: ProductComplaintRelateToManyForUpdateInput
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input BusinessRelateToOneForUpdateInput {
  create: BusinessCreateInput
  connect: BusinessWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  description: JSON
  images: ImageRelateToManyForCreateInput
  business: BusinessRelateToOneForCreateInput
  createdAt: DateTime
  reviews: ProductReviewRelateToManyForCreateInput
  complaints: ProductComplaintRelateToManyForCreateInput
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input BusinessRelateToOneForCreateInput {
  create: BusinessCreateInput
  connect: BusinessWhereUniqueInput
}

type Image {
  id: ID!
  file: ImageFieldOutput
  product: Product
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  product: ProductWhereInput
}

input ImageOrderByInput {
  id: OrderDirection
}

input ImageUpdateInput {
  file: ImageFieldInput
  product: ProductRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  file: ImageFieldInput
  product: ProductRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type ProductReview {
  id: ID!
  user: User
  product: Product
  rating: String
  content: String
  moderationStatus: String
  createdAt: DateTime
}

input ProductReviewWhereUniqueInput {
  id: ID
}

input ProductReviewWhereInput {
  AND: [ProductReviewWhereInput!]
  OR: [ProductReviewWhereInput!]
  NOT: [ProductReviewWhereInput!]
  id: IDFilter
  user: UserWhereInput
  product: ProductWhereInput
  rating: StringNullableFilter
  content: StringFilter
  moderationStatus: StringNullableFilter
  createdAt: DateTimeNullableFilter
}

input ProductReviewOrderByInput {
  id: OrderDirection
  rating: OrderDirection
  content: OrderDirection
  moderationStatus: OrderDirection
  createdAt: OrderDirection
}

input ProductReviewUpdateInput {
  user: UserRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  rating: String
  content: String
  moderationStatus: String
  createdAt: DateTime
}

input ProductReviewUpdateArgs {
  where: ProductReviewWhereUniqueInput!
  data: ProductReviewUpdateInput!
}

input ProductReviewCreateInput {
  user: UserRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  rating: String
  content: String
  moderationStatus: String
  createdAt: DateTime
}

type ProductComplaint {
  id: ID!
  user: User
  product: Product
  subject: String
  content: String
  status: String
  createdAt: DateTime
}

input ProductComplaintWhereUniqueInput {
  id: ID
}

input ProductComplaintWhereInput {
  AND: [ProductComplaintWhereInput!]
  OR: [ProductComplaintWhereInput!]
  NOT: [ProductComplaintWhereInput!]
  id: IDFilter
  user: UserWhereInput
  product: ProductWhereInput
  subject: StringFilter
  content: StringFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
}

input ProductComplaintOrderByInput {
  id: OrderDirection
  subject: OrderDirection
  content: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input ProductComplaintUpdateInput {
  user: UserRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  subject: String
  content: String
  status: String
  createdAt: DateTime
}

input ProductComplaintUpdateArgs {
  where: ProductComplaintWhereUniqueInput!
  data: ProductComplaintUpdateInput!
}

input ProductComplaintCreateInput {
  user: UserRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  subject: String
  content: String
  status: String
  createdAt: DateTime
}

type Complaint {
  id: ID!
  user: User
  isAnonymous: String
  subject: String
  content: String
  business: Business
  status: String
  createdAt: DateTime
  replies(where: ComplaintReplyWhereInput! = {}, orderBy: [ComplaintReplyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ComplaintReplyWhereUniqueInput): [ComplaintReply!]
  repliesCount(where: ComplaintReplyWhereInput! = {}): Int
}

input ComplaintWhereUniqueInput {
  id: ID
}

input ComplaintWhereInput {
  AND: [ComplaintWhereInput!]
  OR: [ComplaintWhereInput!]
  NOT: [ComplaintWhereInput!]
  id: IDFilter
  user: UserWhereInput
  isAnonymous: StringNullableFilter
  subject: StringFilter
  content: StringFilter
  business: BusinessWhereInput
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  replies: ComplaintReplyManyRelationFilter
}

input ComplaintReplyManyRelationFilter {
  every: ComplaintReplyWhereInput
  some: ComplaintReplyWhereInput
  none: ComplaintReplyWhereInput
}

input ComplaintOrderByInput {
  id: OrderDirection
  isAnonymous: OrderDirection
  subject: OrderDirection
  content: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input ComplaintUpdateInput {
  user: UserRelateToOneForUpdateInput
  isAnonymous: String
  subject: String
  content: String
  business: BusinessRelateToOneForUpdateInput
  status: String
  createdAt: DateTime
  replies: ComplaintReplyRelateToManyForUpdateInput
}

input ComplaintReplyRelateToManyForUpdateInput {
  disconnect: [ComplaintReplyWhereUniqueInput!]
  set: [ComplaintReplyWhereUniqueInput!]
  create: [ComplaintReplyCreateInput!]
  connect: [ComplaintReplyWhereUniqueInput!]
}

input ComplaintUpdateArgs {
  where: ComplaintWhereUniqueInput!
  data: ComplaintUpdateInput!
}

input ComplaintCreateInput {
  user: UserRelateToOneForCreateInput
  isAnonymous: String
  subject: String
  content: String
  business: BusinessRelateToOneForCreateInput
  status: String
  createdAt: DateTime
  replies: ComplaintReplyRelateToManyForCreateInput
}

input ComplaintReplyRelateToManyForCreateInput {
  create: [ComplaintReplyCreateInput!]
  connect: [ComplaintReplyWhereUniqueInput!]
}

type Review {
  id: ID!
  user: User
  isAnonymous: String
  rating: String
  content: String
  business: Business
  moderationStatus: String
  createdAt: DateTime
  replies(where: ReviewReplyWhereInput! = {}, orderBy: [ReviewReplyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewReplyWhereUniqueInput): [ReviewReply!]
  repliesCount(where: ReviewReplyWhereInput! = {}): Int
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  user: UserWhereInput
  isAnonymous: StringNullableFilter
  rating: StringNullableFilter
  content: StringFilter
  business: BusinessWhereInput
  moderationStatus: StringNullableFilter
  createdAt: DateTimeNullableFilter
  replies: ReviewReplyManyRelationFilter
}

input ReviewReplyManyRelationFilter {
  every: ReviewReplyWhereInput
  some: ReviewReplyWhereInput
  none: ReviewReplyWhereInput
}

input ReviewOrderByInput {
  id: OrderDirection
  isAnonymous: OrderDirection
  rating: OrderDirection
  content: OrderDirection
  moderationStatus: OrderDirection
  createdAt: OrderDirection
}

input ReviewUpdateInput {
  user: UserRelateToOneForUpdateInput
  isAnonymous: String
  rating: String
  content: String
  business: BusinessRelateToOneForUpdateInput
  moderationStatus: String
  createdAt: DateTime
  replies: ReviewReplyRelateToManyForUpdateInput
}

input ReviewReplyRelateToManyForUpdateInput {
  disconnect: [ReviewReplyWhereUniqueInput!]
  set: [ReviewReplyWhereUniqueInput!]
  create: [ReviewReplyCreateInput!]
  connect: [ReviewReplyWhereUniqueInput!]
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  user: UserRelateToOneForCreateInput
  isAnonymous: String
  rating: String
  content: String
  business: BusinessRelateToOneForCreateInput
  moderationStatus: String
  createdAt: DateTime
  replies: ReviewReplyRelateToManyForCreateInput
}

input ReviewReplyRelateToManyForCreateInput {
  create: [ReviewReplyCreateInput!]
  connect: [ReviewReplyWhereUniqueInput!]
}

type Quote {
  id: ID!
  user: User
  service: String
  message: String
  business: Business
  status: String
  createdAt: DateTime
  replies(where: QuoteReplyWhereInput! = {}, orderBy: [QuoteReplyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuoteReplyWhereUniqueInput): [QuoteReply!]
  repliesCount(where: QuoteReplyWhereInput! = {}): Int
}

input QuoteWhereUniqueInput {
  id: ID
}

input QuoteWhereInput {
  AND: [QuoteWhereInput!]
  OR: [QuoteWhereInput!]
  NOT: [QuoteWhereInput!]
  id: IDFilter
  user: UserWhereInput
  service: StringFilter
  message: StringFilter
  business: BusinessWhereInput
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  replies: QuoteReplyManyRelationFilter
}

input QuoteReplyManyRelationFilter {
  every: QuoteReplyWhereInput
  some: QuoteReplyWhereInput
  none: QuoteReplyWhereInput
}

input QuoteOrderByInput {
  id: OrderDirection
  service: OrderDirection
  message: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input QuoteUpdateInput {
  user: UserRelateToOneForUpdateInput
  service: String
  message: String
  business: BusinessRelateToOneForUpdateInput
  status: String
  createdAt: DateTime
  replies: QuoteReplyRelateToManyForUpdateInput
}

input QuoteReplyRelateToManyForUpdateInput {
  disconnect: [QuoteReplyWhereUniqueInput!]
  set: [QuoteReplyWhereUniqueInput!]
  create: [QuoteReplyCreateInput!]
  connect: [QuoteReplyWhereUniqueInput!]
}

input QuoteUpdateArgs {
  where: QuoteWhereUniqueInput!
  data: QuoteUpdateInput!
}

input QuoteCreateInput {
  user: UserRelateToOneForCreateInput
  service: String
  message: String
  business: BusinessRelateToOneForCreateInput
  status: String
  createdAt: DateTime
  replies: QuoteReplyRelateToManyForCreateInput
}

input QuoteReplyRelateToManyForCreateInput {
  create: [QuoteReplyCreateInput!]
  connect: [QuoteReplyWhereUniqueInput!]
}

type ComplaintReply {
  id: ID!
  content: String
  complaint: Complaint
  business: Business
  createdAt: DateTime
}

input ComplaintReplyWhereUniqueInput {
  id: ID
}

input ComplaintReplyWhereInput {
  AND: [ComplaintReplyWhereInput!]
  OR: [ComplaintReplyWhereInput!]
  NOT: [ComplaintReplyWhereInput!]
  id: IDFilter
  content: StringFilter
  complaint: ComplaintWhereInput
  business: BusinessWhereInput
  createdAt: DateTimeNullableFilter
}

input ComplaintReplyOrderByInput {
  id: OrderDirection
  content: OrderDirection
  createdAt: OrderDirection
}

input ComplaintReplyUpdateInput {
  content: String
  complaint: ComplaintRelateToOneForUpdateInput
  business: BusinessRelateToOneForUpdateInput
  createdAt: DateTime
}

input ComplaintRelateToOneForUpdateInput {
  create: ComplaintCreateInput
  connect: ComplaintWhereUniqueInput
  disconnect: Boolean
}

input ComplaintReplyUpdateArgs {
  where: ComplaintReplyWhereUniqueInput!
  data: ComplaintReplyUpdateInput!
}

input ComplaintReplyCreateInput {
  content: String
  complaint: ComplaintRelateToOneForCreateInput
  business: BusinessRelateToOneForCreateInput
  createdAt: DateTime
}

input ComplaintRelateToOneForCreateInput {
  create: ComplaintCreateInput
  connect: ComplaintWhereUniqueInput
}

type ReviewReply {
  id: ID!
  content: String
  review: Review
  business: Business
  createdAt: DateTime
}

input ReviewReplyWhereUniqueInput {
  id: ID
}

input ReviewReplyWhereInput {
  AND: [ReviewReplyWhereInput!]
  OR: [ReviewReplyWhereInput!]
  NOT: [ReviewReplyWhereInput!]
  id: IDFilter
  content: StringFilter
  review: ReviewWhereInput
  business: BusinessWhereInput
  createdAt: DateTimeNullableFilter
}

input ReviewReplyOrderByInput {
  id: OrderDirection
  content: OrderDirection
  createdAt: OrderDirection
}

input ReviewReplyUpdateInput {
  content: String
  review: ReviewRelateToOneForUpdateInput
  business: BusinessRelateToOneForUpdateInput
  createdAt: DateTime
}

input ReviewRelateToOneForUpdateInput {
  create: ReviewCreateInput
  connect: ReviewWhereUniqueInput
  disconnect: Boolean
}

input ReviewReplyUpdateArgs {
  where: ReviewReplyWhereUniqueInput!
  data: ReviewReplyUpdateInput!
}

input ReviewReplyCreateInput {
  content: String
  review: ReviewRelateToOneForCreateInput
  business: BusinessRelateToOneForCreateInput
  createdAt: DateTime
}

input ReviewRelateToOneForCreateInput {
  create: ReviewCreateInput
  connect: ReviewWhereUniqueInput
}

type QuoteReply {
  id: ID!
  content: String
  quote: Quote
  business: Business
  createdAt: DateTime
}

input QuoteReplyWhereUniqueInput {
  id: ID
}

input QuoteReplyWhereInput {
  AND: [QuoteReplyWhereInput!]
  OR: [QuoteReplyWhereInput!]
  NOT: [QuoteReplyWhereInput!]
  id: IDFilter
  content: StringFilter
  quote: QuoteWhereInput
  business: BusinessWhereInput
  createdAt: DateTimeNullableFilter
}

input QuoteReplyOrderByInput {
  id: OrderDirection
  content: OrderDirection
  createdAt: OrderDirection
}

input QuoteReplyUpdateInput {
  content: String
  quote: QuoteRelateToOneForUpdateInput
  business: BusinessRelateToOneForUpdateInput
  createdAt: DateTime
}

input QuoteRelateToOneForUpdateInput {
  create: QuoteCreateInput
  connect: QuoteWhereUniqueInput
  disconnect: Boolean
}

input QuoteReplyUpdateArgs {
  where: QuoteReplyWhereUniqueInput!
  data: QuoteReplyUpdateInput!
}

input QuoteReplyCreateInput {
  content: String
  quote: QuoteRelateToOneForCreateInput
  business: BusinessRelateToOneForCreateInput
  createdAt: DateTime
}

input QuoteRelateToOneForCreateInput {
  create: QuoteCreateInput
  connect: QuoteWhereUniqueInput
}

type JobListing {
  id: ID!
  business: Business
  title: String
  description: String
  salary: Int
  location: String
  createdAt: DateTime
  updatedAt: DateTime
}

input JobListingWhereUniqueInput {
  id: ID
}

input JobListingWhereInput {
  AND: [JobListingWhereInput!]
  OR: [JobListingWhereInput!]
  NOT: [JobListingWhereInput!]
  id: IDFilter
  business: BusinessWhereInput
  title: StringFilter
  description: StringFilter
  salary: IntNullableFilter
  location: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input JobListingOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  salary: OrderDirection
  location: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input JobListingUpdateInput {
  business: BusinessRelateToOneForUpdateInput
  title: String
  description: String
  salary: Int
  location: String
  createdAt: DateTime
  updatedAt: DateTime
}

input JobListingUpdateArgs {
  where: JobListingWhereUniqueInput!
  data: JobListingUpdateInput!
}

input JobListingCreateInput {
  business: BusinessRelateToOneForCreateInput
  title: String
  description: String
  salary: Int
  location: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBusiness(data: BusinessCreateInput!): Business
  createBusinesses(data: [BusinessCreateInput!]!): [Business]
  updateBusiness(where: BusinessWhereUniqueInput!, data: BusinessUpdateInput!): Business
  updateBusinesses(data: [BusinessUpdateArgs!]!): [Business]
  deleteBusiness(where: BusinessWhereUniqueInput!): Business
  deleteBusinesses(where: [BusinessWhereUniqueInput!]!): [Business]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createProductReview(data: ProductReviewCreateInput!): ProductReview
  createProductReviews(data: [ProductReviewCreateInput!]!): [ProductReview]
  updateProductReview(where: ProductReviewWhereUniqueInput!, data: ProductReviewUpdateInput!): ProductReview
  updateProductReviews(data: [ProductReviewUpdateArgs!]!): [ProductReview]
  deleteProductReview(where: ProductReviewWhereUniqueInput!): ProductReview
  deleteProductReviews(where: [ProductReviewWhereUniqueInput!]!): [ProductReview]
  createProductComplaint(data: ProductComplaintCreateInput!): ProductComplaint
  createProductComplaints(data: [ProductComplaintCreateInput!]!): [ProductComplaint]
  updateProductComplaint(where: ProductComplaintWhereUniqueInput!, data: ProductComplaintUpdateInput!): ProductComplaint
  updateProductComplaints(data: [ProductComplaintUpdateArgs!]!): [ProductComplaint]
  deleteProductComplaint(where: ProductComplaintWhereUniqueInput!): ProductComplaint
  deleteProductComplaints(where: [ProductComplaintWhereUniqueInput!]!): [ProductComplaint]
  createComplaint(data: ComplaintCreateInput!): Complaint
  createComplaints(data: [ComplaintCreateInput!]!): [Complaint]
  updateComplaint(where: ComplaintWhereUniqueInput!, data: ComplaintUpdateInput!): Complaint
  updateComplaints(data: [ComplaintUpdateArgs!]!): [Complaint]
  deleteComplaint(where: ComplaintWhereUniqueInput!): Complaint
  deleteComplaints(where: [ComplaintWhereUniqueInput!]!): [Complaint]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  createQuote(data: QuoteCreateInput!): Quote
  createQuotes(data: [QuoteCreateInput!]!): [Quote]
  updateQuote(where: QuoteWhereUniqueInput!, data: QuoteUpdateInput!): Quote
  updateQuotes(data: [QuoteUpdateArgs!]!): [Quote]
  deleteQuote(where: QuoteWhereUniqueInput!): Quote
  deleteQuotes(where: [QuoteWhereUniqueInput!]!): [Quote]
  createComplaintReply(data: ComplaintReplyCreateInput!): ComplaintReply
  createComplaintReplies(data: [ComplaintReplyCreateInput!]!): [ComplaintReply]
  updateComplaintReply(where: ComplaintReplyWhereUniqueInput!, data: ComplaintReplyUpdateInput!): ComplaintReply
  updateComplaintReplies(data: [ComplaintReplyUpdateArgs!]!): [ComplaintReply]
  deleteComplaintReply(where: ComplaintReplyWhereUniqueInput!): ComplaintReply
  deleteComplaintReplies(where: [ComplaintReplyWhereUniqueInput!]!): [ComplaintReply]
  createReviewReply(data: ReviewReplyCreateInput!): ReviewReply
  createReviewReplies(data: [ReviewReplyCreateInput!]!): [ReviewReply]
  updateReviewReply(where: ReviewReplyWhereUniqueInput!, data: ReviewReplyUpdateInput!): ReviewReply
  updateReviewReplies(data: [ReviewReplyUpdateArgs!]!): [ReviewReply]
  deleteReviewReply(where: ReviewReplyWhereUniqueInput!): ReviewReply
  deleteReviewReplies(where: [ReviewReplyWhereUniqueInput!]!): [ReviewReply]
  createQuoteReply(data: QuoteReplyCreateInput!): QuoteReply
  createQuoteReplies(data: [QuoteReplyCreateInput!]!): [QuoteReply]
  updateQuoteReply(where: QuoteReplyWhereUniqueInput!, data: QuoteReplyUpdateInput!): QuoteReply
  updateQuoteReplies(data: [QuoteReplyUpdateArgs!]!): [QuoteReply]
  deleteQuoteReply(where: QuoteReplyWhereUniqueInput!): QuoteReply
  deleteQuoteReplies(where: [QuoteReplyWhereUniqueInput!]!): [QuoteReply]
  createJobListing(data: JobListingCreateInput!): JobListing
  createJobListings(data: [JobListingCreateInput!]!): [JobListing]
  updateJobListing(where: JobListingWhereUniqueInput!, data: JobListingUpdateInput!): JobListing
  updateJobListings(data: [JobListingUpdateArgs!]!): [JobListing]
  deleteJobListing(where: JobListingWhereUniqueInput!): JobListing
  deleteJobListings(where: [JobListingWhereUniqueInput!]!): [JobListing]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  business(where: BusinessWhereUniqueInput!): Business
  businesses(where: BusinessWhereInput! = {}, orderBy: [BusinessOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BusinessWhereUniqueInput): [Business!]
  businessesCount(where: BusinessWhereInput! = {}): Int
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  productReview(where: ProductReviewWhereUniqueInput!): ProductReview
  productReviews(where: ProductReviewWhereInput! = {}, orderBy: [ProductReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductReviewWhereUniqueInput): [ProductReview!]
  productReviewsCount(where: ProductReviewWhereInput! = {}): Int
  productComplaint(where: ProductComplaintWhereUniqueInput!): ProductComplaint
  productComplaints(where: ProductComplaintWhereInput! = {}, orderBy: [ProductComplaintOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductComplaintWhereUniqueInput): [ProductComplaint!]
  productComplaintsCount(where: ProductComplaintWhereInput! = {}): Int
  complaint(where: ComplaintWhereUniqueInput!): Complaint
  complaints(where: ComplaintWhereInput! = {}, orderBy: [ComplaintOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ComplaintWhereUniqueInput): [Complaint!]
  complaintsCount(where: ComplaintWhereInput! = {}): Int
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  quote(where: QuoteWhereUniqueInput!): Quote
  quotes(where: QuoteWhereInput! = {}, orderBy: [QuoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuoteWhereUniqueInput): [Quote!]
  quotesCount(where: QuoteWhereInput! = {}): Int
  complaintReply(where: ComplaintReplyWhereUniqueInput!): ComplaintReply
  complaintReplies(where: ComplaintReplyWhereInput! = {}, orderBy: [ComplaintReplyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ComplaintReplyWhereUniqueInput): [ComplaintReply!]
  complaintRepliesCount(where: ComplaintReplyWhereInput! = {}): Int
  reviewReply(where: ReviewReplyWhereUniqueInput!): ReviewReply
  reviewReplies(where: ReviewReplyWhereInput! = {}, orderBy: [ReviewReplyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewReplyWhereUniqueInput): [ReviewReply!]
  reviewRepliesCount(where: ReviewReplyWhereInput! = {}): Int
  quoteReply(where: QuoteReplyWhereUniqueInput!): QuoteReply
  quoteReplies(where: QuoteReplyWhereInput! = {}, orderBy: [QuoteReplyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuoteReplyWhereUniqueInput): [QuoteReply!]
  quoteRepliesCount(where: QuoteReplyWhereInput! = {}): Int
  jobListing(where: JobListingWhereUniqueInput!): JobListing
  jobListings(where: JobListingWhereInput! = {}, orderBy: [JobListingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobListingWhereUniqueInput): [JobListing!]
  jobListingsCount(where: JobListingWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
